[build-system]
requires = ["maturin>=1.0,<2.0"]
build-backend = "maturin"

[project]
name = "sakurs"
description = "Fast, parallel sentence boundary detection using Delta-Stack Monoid algorithm"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "Ryo Sogabe", email = "163720533+sog4be@users.noreply.github.com" }]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Rust",
    "Topic :: Text Processing",
    "Topic :: Text Processing :: Linguistic",
]
keywords = ["nlp", "sentence", "boundary", "detection", "tokenization", "parallel"]
requires-python = ">=3.9"
dynamic = ["version"]

[project.urls]
Repository = "https://github.com/sog4be/sakurs"
Documentation = "https://github.com/sog4be/sakurs#readme"
Issues = "https://github.com/sog4be/sakurs/issues"

[project.optional-dependencies]
dev = [
    "ruff>=0.12.0,<0.13.0",
    "mypy~=1.0",
    "types-setuptools",
]
test = [
    "pytest~=7.0",
    "pytest-cov~=4.0",
    "hypothesis~=6.0",
]
benchmark = [
    "pytest~=7.0",
    "pytest-benchmark~=4.0",
    "pysbd~=0.3.4",
    "ja-sentence-segmenter~=0.0.2",
    "pytest-md-report~=0.5.0",
]

[tool.maturin]
features = ["extension-module"]

[tool.uv]
dev-dependencies = [
    "maturin~=1.0",
]

[tool.ruff]
# Inherit from workspace configuration
extend = "../pyproject.toml"
src = ["src", "tests", "python"]

[tool.ruff.lint]
# Additional rules specific to Python bindings
extend-select = [
    "D",      # pydocstyle (docstring checks)
    "N",      # pep8-naming (naming conventions)
    "PT",     # flake8-pytest-style
]

[tool.ruff.lint.per-file-ignores]
# PyO3 specific ignores
"src/lib.rs" = ["D"]  # Don't check Rust files
"*.pyi" = ["D", "UP007", "UP045"]  # Type stubs don't need docstrings, keep Python 3.9 compatible syntax
# Japanese language tests contain fullwidth punctuation which is intentional
"tests/test_*.py" = ["RUF001", "PLR2004"]  # Allow fullwidth chars and magic numbers in tests
# Benchmark files allow more relaxed linting
"benchmarks/*.py" = ["RUF001", "PLR2004", "PLC0415", "F401"]  # Allow fullwidth chars, magic numbers, imports in functions, unused imports
"benchmarks/generate_summary.py" = ["T201"]  # Allow print statements for summary generation

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
strict_optional = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
show_error_codes = true
show_column_numbers = true
pretty = true
exclude = [
    "build/",
    "dist/",
    ".venv/",
    "venv/",
    "temp/",
]

# Per-module configuration
[[tool.mypy.overrides]]
module = "sakurs.*"
ignore_errors = false

[[tool.mypy.overrides]]
module = "tests.*"
# Allow untyped defs in tests
disallow_untyped_defs = false
disallow_untyped_decorators = false
# Allow unreachable code for import fallback patterns
warn_unreachable = false

[[tool.mypy.overrides]]
module = "benchmarks.*"
# Benchmarks have more relaxed type checking
disallow_untyped_defs = true
disallow_untyped_decorators = false  # Allow pytest fixtures
check_untyped_defs = true
warn_return_any = true

[[tool.mypy.overrides]]
module = [
    "pytest",
    "pytest.*",
    "pytest_benchmark",
    "pytest_benchmark.*",
    "hypothesis",
    "setuptools",
    "maturin",
    "pysbd",
    "pysbd.*",
    "ja_sentence_segmenter",
    "ja_sentence_segmenter.*",
]
ignore_missing_imports = true