name: Test Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  actions: read
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  coverage:
    name: Generate test coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache cargo dependencies
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-coverage-

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2.56.2
        with:
          tool: cargo-llvm-cov

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2.56.2
        with:
          tool: nextest

      - name: Run tests with coverage
        run: |
          set -euo pipefail
          echo "üß™ Running tests with coverage instrumentation..."
          # Use nextest if available, otherwise fall back to regular test
          if command -v cargo-nextest >/dev/null 2>&1; then
            cargo llvm-cov nextest --all-features --workspace --lcov --output-path lcov.info
          else
            cargo llvm-cov test --all-features --workspace --lcov --output-path lcov.info
          fi
          
          echo ""
          echo "üìä Coverage Summary:"
          echo "==================="
          cargo llvm-cov report --summary-only

      - name: Generate detailed reports
        run: |
          set -euo pipefail
          # Generate HTML report for visual inspection
          cargo llvm-cov report --html
          
          # Generate summary for PR comment
          cargo llvm-cov report --summary-only > coverage-summary.txt
          
          # Generate per-package coverage for PR comment
          # Note: Use the overall summary and extract package-specific data from it
          cargo llvm-cov report --summary-only > coverage-full.txt
          
          # Extract sakurs-core coverage
          grep "sakurs-core" coverage-full.txt > coverage-core.txt || echo "N/A" > coverage-core.txt
          
          # Extract sakurs-cli coverage  
          grep "sakurs-cli" coverage-full.txt > coverage-cli.txt || echo "N/A" > coverage-cli.txt
          
          # Display coverage per crate
          echo ""
          echo "üì¶ Coverage by Crate:"
          echo "===================="
          cargo llvm-cov report --summary-only --package sakurs-core || echo "‚ö†Ô∏è sakurs-core coverage failed"
          cargo llvm-cov report --summary-only --package sakurs-cli || echo "‚ö†Ô∏è sakurs-cli coverage failed"
          
          # For PRs, get main branch coverage for comparison
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo ""
            echo "üîÑ Fetching main branch coverage for comparison..."
            
            # Save current coverage percentages
            current_overall=$(cargo llvm-cov report --summary-only | grep "TOTAL" | grep -o '[0-9]\+\.[0-9]\+%' | tail -1 || echo "0.0%")
            current_core=$(cargo llvm-cov report --summary-only --package sakurs-core | grep "TOTAL" | grep -o '[0-9]\+\.[0-9]\+%' | tail -1 || echo "0.0%")
            current_cli=$(cargo llvm-cov report --summary-only --package sakurs-cli | grep "TOTAL" | grep -o '[0-9]\+\.[0-9]\+%' | tail -1 || echo "0.0%")
            
            echo "current_overall=$current_overall" > coverage-current.txt
            echo "current_core=$current_core" >> coverage-current.txt
            echo "current_cli=$current_cli" >> coverage-current.txt
            
            # Try to get main branch coverage (may fail if no previous run)
            echo "main_overall=N/A" > coverage-main.txt
            echo "main_core=N/A" >> coverage-main.txt
            echo "main_cli=N/A" >> coverage-main.txt
            
            echo "‚úÖ Coverage comparison data prepared"
          fi
          
          # For PRs, analyze coverage of changed files only
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo ""
            echo "üîç Analyzing coverage of changed files..."
            
            # Get list of changed files
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
            changed_files=$(git diff --name-only ${{ github.base_ref }}...HEAD | grep -E '\.(rs)$' || echo "")
            
            if [ -n "$changed_files" ]; then
              echo "Changed Rust files:"
              echo "$changed_files"
              
              # Generate coverage report for changed files
              echo "# Changed Files Coverage Analysis" > coverage-diff.txt
              echo "" >> coverage-diff.txt
              
              total_changed_files=0
              covered_changed_files=0
              
              for file in $changed_files; do
                if [ -f "$file" ]; then
                  total_changed_files=$((total_changed_files + 1))
                  
                  # Check if file appears in coverage report
                  file_coverage=$(cargo llvm-cov report --summary-only | grep "$file" | head -1 || echo "")
                  
                  if [ -n "$file_coverage" ]; then
                    covered_changed_files=$((covered_changed_files + 1))
                    coverage_percent=$(echo "$file_coverage" | grep -o '[0-9]\+\.[0-9]\+%' | head -1 || echo "N/A")
                    echo "‚úÖ $file: $coverage_percent" >> coverage-diff.txt
                  else
                    echo "‚ùå $file: No coverage data" >> coverage-diff.txt
                  fi
                fi
              done
              
              echo "" >> coverage-diff.txt
              echo "Summary: $covered_changed_files/$total_changed_files files have coverage data" >> coverage-diff.txt
              
              # Determine if this is a new file or modified file
              new_files=$(git diff --name-status ${{ github.base_ref }}...HEAD | grep '^A' | cut -f2 | grep -E '\.(rs)$' || echo "")
              modified_files=$(git diff --name-status ${{ github.base_ref }}...HEAD | grep '^M' | cut -f2 | grep -E '\.(rs)$' || echo "")
              
              if [ -n "$new_files" ]; then
                echo "" >> coverage-diff.txt
                echo "üìÑ New files:" >> coverage-diff.txt
                echo "$new_files" | sed 's/^/  - /' >> coverage-diff.txt
              fi
              
              if [ -n "$modified_files" ]; then
                echo "" >> coverage-diff.txt
                echo "üìù Modified files:" >> coverage-diff.txt
                echo "$modified_files" | sed 's/^/  - /' >> coverage-diff.txt
              fi
              
            else
              echo "No changed Rust files found" > coverage-diff.txt
            fi
            
            echo "‚úÖ Changed files analysis complete"
          fi

      - name: Check coverage threshold
        run: |
          set -euo pipefail
          echo "üéØ Checking coverage threshold..."
          # Fail if coverage drops below 80%
          cargo llvm-cov report --fail-under-lines 80 || {
            echo "‚ùå Coverage below 80% threshold"
            exit 1
          }

      - name: Update README coverage badge
        if: github.ref == 'refs/heads/main'
        run: |
          set -euo pipefail
          echo "üè∑Ô∏è Updating README coverage badge..."
          
          # Extract overall coverage percentage from TOTAL line (Lines Cover column)
          overall_percentage=$(cargo llvm-cov report --summary-only | grep "TOTAL" | grep -o '[0-9]\+\.[0-9]\+%' | tail -1 | sed 's/%//' || echo "0.0")
          
          # Determine badge color based on coverage
          if (( $(echo "$overall_percentage >= 90" | bc -l) )); then
            color="brightgreen"
          elif (( $(echo "$overall_percentage >= 80" | bc -l) )); then
            color="green"
          elif (( $(echo "$overall_percentage >= 70" | bc -l) )); then
            color="yellow"
          elif (( $(echo "$overall_percentage >= 60" | bc -l) )); then
            color="orange"
          else
            color="red"
          fi
          
          # Update README badge
          new_badge_url="https://img.shields.io/badge/coverage-${overall_percentage}%25-${color}"
          
          # Use sed to update the badge URL in README.md
          sed -i.bak "s|https://img.shields.io/badge/coverage-[^-]*-[^\"]*|${new_badge_url}|g" README.md
          
          # Check if README was actually modified
          if ! git diff --quiet README.md; then
            echo "‚úÖ README coverage badge updated to ${overall_percentage}% (${color})"
            
            # Commit the change
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add README.md
            git commit -m "chore: update coverage badge to ${overall_percentage}%"
            git push
          else
            echo "‚ÑπÔ∏è README coverage badge already up to date"
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: coverage-report
          path: |
            target/llvm-cov/html/
            lcov.info
            coverage-summary.txt
          retention-days: 30

      - name: Comment PR with coverage (update existing)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const fs = require('fs');
            
            try {
              // Read coverage summary
              const summary = fs.readFileSync('coverage-summary.txt', 'utf8');
              
              // Read per-package coverage
              const readPackageCoverage = (filename) => {
                try {
                  const content = fs.readFileSync(filename, 'utf8').trim();
                  if (content === 'N/A' || content === '') return 'N/A';
                  
                  // Extract percentage from line-based coverage report
                  // Format: "sakurs-core/src/...    XX.XX%    ..."
                  const match = content.match(/(\d+\.\d+)%/);
                  return match ? `${match[1]}%` : 'N/A';
                } catch (error) {
                  return 'N/A';
                }
              };
              
              const corePercentage = readPackageCoverage('coverage-core.txt');
              const cliPercentage = readPackageCoverage('coverage-cli.txt');
              
              // Read comparison data if available
              const readComparisonData = () => {
                try {
                  const current = fs.readFileSync('coverage-current.txt', 'utf8');
                  const main = fs.readFileSync('coverage-main.txt', 'utf8');
                  
                  const parseData = (content) => {
                    const lines = content.trim().split('\n');
                    const data = {};
                    lines.forEach(line => {
                      const [key, value] = line.split('=');
                      data[key] = value;
                    });
                    return data;
                  };
                  
                  return {
                    current: parseData(current),
                    main: parseData(main)
                  };
                } catch (error) {
                  return null;
                }
              };
              
              const comparison = readComparisonData();
              
              // Create package table with optional comparison
              let packageTable;
              if (comparison && comparison.main.main_overall !== 'N/A') {
                const formatDelta = (current, main) => {
                  if (main === 'N/A' || current === 'N/A') return '';
                  const currentNum = parseFloat(current.replace('%', ''));
                  const mainNum = parseFloat(main.replace('%', ''));
                  const delta = currentNum - mainNum;
                  if (Math.abs(delta) < 0.1) return ' (no change)';
                  const sign = delta > 0 ? '+' : '';
                  return ` (${sign}${delta.toFixed(1)}%)`;
                };
                
                packageTable = `
              | Package | Coverage | vs main |
              |---------|----------|---------|
              | sakurs-core | ${corePercentage} | ${formatDelta(comparison.current.current_core, comparison.main.main_core)} |
              | sakurs-cli | ${cliPercentage} | ${formatDelta(comparison.current.current_cli, comparison.main.main_cli)} |`;
              } else {
                packageTable = `
              | Package | Coverage |
              |---------|----------|
              | sakurs-core | ${corePercentage} |
              | sakurs-cli | ${cliPercentage} |`;
              }
              
              // Create coverage comment with unique identifier
              const commentIdentifier = '<!-- SAKURS_COVERAGE_COMMENT -->';
              
              // Add changed files coverage for PRs
              let changedFilesSection = '';
              try {
                const diffCoverage = fs.readFileSync('coverage-diff.txt', 'utf8');
                if (diffCoverage && diffCoverage.trim() !== 'No changed Rust files found') {
                  changedFilesSection = `
              
              ### üîç Changed Files Coverage
              \`\`\`
              ${diffCoverage.trim()}
              \`\`\``;
                }
              } catch (error) {
                // coverage-diff.txt not available (not a PR or no changed files)
              }
              
              const body = `${commentIdentifier}
              ## üìä Test Coverage Report
              
              ### Overall Coverage
              \`\`\`
              ${summary.trim()}
              \`\`\`
              ${packageTable}${changedFilesSection}
              
              üìé [View detailed HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              ---
              _Automated coverage report ‚Ä¢ Updated: ${new Date().toISOString()}_`;
              
              // Check for existing coverage comment
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              const existingComment = comments.data.find(comment => 
                comment.body.includes(commentIdentifier)
              );
              
              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: body
                });
                console.log('‚úÖ Coverage comment updated successfully');
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: body
                });
                console.log('‚úÖ Coverage comment created successfully');
              }
              
            } catch (error) {
              console.error('‚ùå Failed to handle coverage comment:', error);
              // Don't fail the workflow if comment posting fails
            }

      - name: Display coverage in job summary
        if: always()
        run: |
          echo "## Test Coverage Report üìä" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Overall Coverage" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat coverage-summary.txt >> $GITHUB_STEP_SUMMARY || echo "Coverage summary not available" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìé [Download detailed HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
