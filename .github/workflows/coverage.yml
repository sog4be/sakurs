name: Test Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  actions: read
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  coverage:
    name: Generate test coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache cargo dependencies
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-coverage-

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2.56.1
        with:
          tool: cargo-llvm-cov

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2.56.1
        with:
          tool: nextest

      - name: Run tests with coverage
        run: |
          set -euo pipefail
          echo "🧪 Running tests with coverage instrumentation..."
          # Use nextest if available, otherwise fall back to regular test
          if command -v cargo-nextest >/dev/null 2>&1; then
            cargo llvm-cov nextest --all-features --workspace --lcov --output-path lcov.info
          else
            cargo llvm-cov test --all-features --workspace --lcov --output-path lcov.info
          fi
          
          echo ""
          echo "📊 Coverage Summary:"
          echo "==================="
          cargo llvm-cov report --summary-only

      - name: Generate detailed reports
        run: |
          set -euo pipefail
          # Generate HTML report for visual inspection
          cargo llvm-cov report --html
          
          # Generate summary for PR comment
          cargo llvm-cov report --summary-only > coverage-summary.txt
          
          # Generate per-package coverage for PR comment
          cargo llvm-cov report --summary-only --package sakurs-core > coverage-core.txt || echo "N/A" > coverage-core.txt
          cargo llvm-cov report --summary-only --package sakurs-cli > coverage-cli.txt || echo "N/A" > coverage-cli.txt
          
          # Display coverage per crate
          echo ""
          echo "📦 Coverage by Crate:"
          echo "===================="
          cargo llvm-cov report --summary-only --package sakurs-core || echo "⚠️ sakurs-core coverage failed"
          cargo llvm-cov report --summary-only --package sakurs-cli || echo "⚠️ sakurs-cli coverage failed"

      - name: Check coverage threshold
        run: |
          set -euo pipefail
          echo "🎯 Checking coverage threshold..."
          # Fail if coverage drops below 80%
          cargo llvm-cov report --fail-under-lines 80 || {
            echo "❌ Coverage below 80% threshold"
            exit 1
          }

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: coverage-report
          path: |
            target/llvm-cov/html/
            lcov.info
            coverage-summary.txt
          retention-days: 30

      - name: Comment PR with coverage (update existing)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const fs = require('fs');
            
            try {
              // Read coverage summary
              const summary = fs.readFileSync('coverage-summary.txt', 'utf8');
              
              // Read per-package coverage
              const readPackageCoverage = (filename) => {
                try {
                  const content = fs.readFileSync(filename, 'utf8').trim();
                  if (content === 'N/A' || content === '') return 'N/A';
                  
                  // Extract percentage from summary (format: "lines......: XX.X% (N of N lines)")
                  const match = content.match(/lines\.*:\s*(\d+\.\d+)%/);
                  return match ? `${match[1]}%` : 'N/A';
                } catch (error) {
                  return 'N/A';
                }
              };
              
              const corePercentage = readPackageCoverage('coverage-core.txt');
              const cliPercentage = readPackageCoverage('coverage-cli.txt');
              
              // Create package table
              const packageTable = `
              | Package | Coverage |
              |---------|----------|
              | sakurs-core | ${corePercentage} |
              | sakurs-cli | ${cliPercentage} |`;
              
              // Create coverage comment with unique identifier
              const commentIdentifier = '<!-- SAKURS_COVERAGE_COMMENT -->';
              const body = `${commentIdentifier}
              ## 📊 Test Coverage Report
              
              ### Overall Coverage
              \`\`\`
              ${summary.trim()}
              \`\`\`
              
              ### Coverage by Package
              ${packageTable}
              
              📎 [View detailed HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
              
              ---
              _Automated coverage report • Updated: ${new Date().toISOString()}_`;
              
              // Check for existing coverage comment
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number
              });
              
              const existingComment = comments.data.find(comment => 
                comment.body.includes(commentIdentifier)
              );
              
              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: body
                });
                console.log('✅ Coverage comment updated successfully');
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: body
                });
                console.log('✅ Coverage comment created successfully');
              }
              
            } catch (error) {
              console.error('❌ Failed to handle coverage comment:', error);
              // Don't fail the workflow if comment posting fails
            }

      - name: Display coverage in job summary
        if: always()
        run: |
          echo "## Test Coverage Report 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Overall Coverage" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat coverage-summary.txt >> $GITHUB_STEP_SUMMARY || echo "Coverage summary not available" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📎 [Download detailed HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
