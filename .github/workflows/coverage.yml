name: Test Coverage

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write  # Required for updating README badge on main branch
  actions: read

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  coverage:
    name: Generate test coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Cache cargo dependencies
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-coverage-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-coverage-

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@v2.56.6
        with:
          tool: cargo-llvm-cov

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2.56.6
        with:
          tool: nextest


      - name: Run tests with coverage
        run: |
          set -euo pipefail
          echo "🧪 Running tests with coverage instrumentation..."
          # Coverage configuration notes:
          # - Branch coverage requires Rust nightly (not available with stable)
          # - sakurs-benchmarks is excluded as it contains benchmark code
          # - benchmarks/ directory is excluded via ignore-filename-regex
          # - sakurs-py is excluded because it's a PyO3 extension module that requires
          #   Python runtime and cannot be tested with regular cargo test commands.
          #   PyO3 extension modules are meant to be imported by Python, not executed
          #   as standalone Rust binaries, making them incompatible with cargo test.
          
          if command -v cargo-nextest >/dev/null 2>&1; then
            cargo llvm-cov nextest --all-features --workspace --exclude sakurs-benchmarks --exclude sakurs-py --ignore-filename-regex='benchmarks/' --lcov --output-path lcov.info
          else
            cargo llvm-cov test --all-features --workspace --exclude sakurs-benchmarks --exclude sakurs-py --ignore-filename-regex='benchmarks/' --lcov --output-path lcov.info
          fi
          
          echo ""
          echo "📊 Coverage Summary:"
          echo "==================="
          cargo llvm-cov report --summary-only --ignore-filename-regex='benchmarks/'

      - name: Generate detailed reports
        run: |
          set -euo pipefail
          # Generate HTML report for visual inspection
          cargo llvm-cov report --html --ignore-filename-regex='benchmarks/'
          
          # Generate summary for PR comment
          cargo llvm-cov report --summary-only --ignore-filename-regex='benchmarks/' > coverage-summary.txt
          
          # Display overall coverage summary
          echo ""
          echo "📦 Workspace Coverage Summary:"
          echo "=============================="
          cargo llvm-cov report --summary-only --ignore-filename-regex='benchmarks/'
          
          # For PRs, get main branch coverage for comparison
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo ""
            echo "🔄 Fetching main branch coverage for comparison..."
            
            # Save current coverage percentages
            current_overall=$(cargo llvm-cov report --summary-only --ignore-filename-regex='benchmarks/' | grep "TOTAL" | grep -o '[0-9]\+\.[0-9]\+%' | tail -1 || echo "0.0%")
            
            echo "current_overall=$current_overall" > coverage-current.txt
            
            # Try to get main branch coverage (may fail if no previous run)
            echo "main_overall=N/A" > coverage-main.txt
            
            echo "✅ Coverage comparison data prepared"
          fi
          
          # For PRs, analyze coverage of changed files only
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo ""
            echo "🔍 Analyzing coverage of changed files..."
            
            # Get list of changed files
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
            changed_files=$(git diff --name-only ${{ github.base_ref }}...HEAD | grep -E '\.(rs)$' || echo "")
            
            if [ -n "$changed_files" ]; then
              echo "Changed Rust files:"
              echo "$changed_files"
              
              # Generate coverage report for changed files
              echo "# Changed Files Coverage Analysis" > coverage-diff.txt
              echo "" >> coverage-diff.txt
              
              total_changed_files=0
              covered_changed_files=0
              
              for file in $changed_files; do
                if [ -f "$file" ]; then
                  total_changed_files=$((total_changed_files + 1))
                  
                  # Check if file appears in coverage report
                  file_coverage=$(cargo llvm-cov report --summary-only --ignore-filename-regex='benchmarks/' | grep "$file" | head -1 || echo "")
                  
                  if [ -n "$file_coverage" ]; then
                    covered_changed_files=$((covered_changed_files + 1))
                    coverage_percent=$(echo "$file_coverage" | grep -o '[0-9]\+\.[0-9]\+%' | head -1 || echo "N/A")
                    echo "✅ $file: $coverage_percent" >> coverage-diff.txt
                  else
                    echo "❌ $file: No coverage data" >> coverage-diff.txt
                  fi
                fi
              done
              
              echo "" >> coverage-diff.txt
              echo "Summary: $covered_changed_files/$total_changed_files files have coverage data" >> coverage-diff.txt
              
              # Determine if this is a new file or modified file
              new_files=$(git diff --name-status ${{ github.base_ref }}...HEAD | grep '^A' | cut -f2 | grep -E '\.(rs)$' || echo "")
              modified_files=$(git diff --name-status ${{ github.base_ref }}...HEAD | grep '^M' | cut -f2 | grep -E '\.(rs)$' || echo "")
              
              if [ -n "$new_files" ]; then
                echo "" >> coverage-diff.txt
                echo "📄 New files:" >> coverage-diff.txt
                echo "$new_files" | sed 's/^/  - /' >> coverage-diff.txt
              fi
              
              if [ -n "$modified_files" ]; then
                echo "" >> coverage-diff.txt
                echo "📝 Modified files:" >> coverage-diff.txt
                echo "$modified_files" | sed 's/^/  - /' >> coverage-diff.txt
              fi
              
            else
              echo "No changed Rust files found" > coverage-diff.txt
            fi
            
            echo "✅ Changed files analysis complete"
          fi

      - name: Update README coverage badge
        if: github.ref == 'refs/heads/main'
        run: |
          set -euo pipefail
          echo "🏷️ Updating README coverage badge..."
          
          # Extract overall coverage percentage from TOTAL line (Lines Cover column)
          overall_percentage=$(cargo llvm-cov report --summary-only --ignore-filename-regex='benchmarks/' | grep "TOTAL" | grep -o '[0-9]\+\.[0-9]\+%' | tail -1 | sed 's/%//' || echo "0.0")
          
          # Determine badge color based on coverage
          if (( $(echo "$overall_percentage >= 90" | bc -l) )); then
            color="brightgreen"
          elif (( $(echo "$overall_percentage >= 80" | bc -l) )); then
            color="green"
          elif (( $(echo "$overall_percentage >= 70" | bc -l) )); then
            color="yellow"
          elif (( $(echo "$overall_percentage >= 60" | bc -l) )); then
            color="orange"
          else
            color="red"
          fi
          
          # Update README badge
          new_badge_url="https://img.shields.io/badge/coverage-${overall_percentage}%25-${color}"
          
          # Use sed to update the badge URL in README.md
          sed -i.bak "s|https://img.shields.io/badge/coverage-[^-]*-[^\"]*|${new_badge_url}|g" README.md
          
          # Check if README was actually modified
          if ! git diff --quiet README.md; then
            echo "✅ README coverage badge updated to ${overall_percentage}% (${color})"
            
            # Commit the change
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add README.md
            git commit -m "chore: update coverage badge to ${overall_percentage}%"
            git push
          else
            echo "ℹ️ README coverage badge already up to date"
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4.6.2
        if: always()
        with:
          name: coverage-report
          path: |
            target/llvm-cov/html/
            lcov.info
            coverage-summary.txt
          retention-days: 30


      - name: Display coverage in job summary
        if: always()
        run: |
          echo "## Test Coverage Report 📊" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add comparison if available (for PRs)
          if [ -f coverage-current.txt ] && [ -f coverage-main.txt ]; then
            current=$(grep "current_overall=" coverage-current.txt | cut -d'=' -f2 || echo "N/A")
            echo "**Current Coverage: $current**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### Overall Coverage" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat coverage-summary.txt >> $GITHUB_STEP_SUMMARY || echo "Coverage summary not available" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Add changed files coverage for PRs
          if [ -f coverage-diff.txt ] && [ "${{ github.event_name }}" = "pull_request" ]; then
            if grep -q "No changed Rust files found" coverage-diff.txt; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "_No Rust files were modified in this PR._" >> $GITHUB_STEP_SUMMARY
            else
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### 🔍 Changed Files Coverage" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat coverage-diff.txt >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📎 [Download detailed HTML report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: Check coverage threshold
        run: |
          set -euo pipefail
          echo "🎯 Checking coverage threshold..."
          # Fail if coverage drops below 80%
          cargo llvm-cov report --fail-under-lines 80 --ignore-filename-regex='benchmarks/' || {
            echo "❌ Coverage below 80% threshold"
            echo "⚠️ Check the job summary for the full coverage report"
            exit 1
          }
          echo "✅ Coverage meets the 80% threshold"