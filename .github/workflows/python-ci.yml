name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  # Fast checks that run first to fail quickly
  python-quick-checks:
    name: Python Quick Checks (Ruff & mypy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "sakurs-py/pyproject.toml"
      
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('sakurs-py/pyproject.toml') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('sakurs-py/pyproject.toml') }}
            uv-${{ runner.os }}
      
      - name: Install dependencies
        run: |
          cd sakurs-py
          uv sync --dev
      
      - name: Check formatting with Ruff
        run: |
          cd sakurs-py
          uv run ruff format --check .
      
      - name: Lint with Ruff
        run: |
          cd sakurs-py
          uv run ruff check .
      
      - name: Type check with mypy
        run: |
          cd sakurs-py
          uv run mypy .
      
      - name: Check Rust code compilation
        run: |
          cd sakurs-py
          cargo check --all-features
      
      - name: Lint Rust code with clippy
        run: |
          cd sakurs-py
          cargo clippy --all-features -- -D warnings
      
      - name: Minimize uv cache
        run: uv cache prune --ci

  python-test:
    name: Python Tests
    runs-on: ${{ matrix.os }}
    needs: python-quick-checks  # Only run tests if quick checks pass
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Skip older Python versions on Windows to save CI time
          - os: windows-latest
            python-version: '3.9'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          cache-dependency-glob: "sakurs-py/pyproject.toml"
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ". -> target"
          key: ${{ matrix.os }}-${{ matrix.python-version }}
      
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('sakurs-py/pyproject.toml') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('sakurs-py/pyproject.toml') }}
            uv-${{ runner.os }}-${{ matrix.python-version }}
            uv-${{ runner.os }}
      
      - name: Install dependencies and build wheel
        run: |
          cd sakurs-py
          uv sync --dev
          # Build wheel instead of editable install for consistent behavior
          uv run maturin build --release --features extension-module
          uv pip install --force-reinstall target/wheels/*.whl
      
      - name: Run Python tests
        run: |
          cd sakurs-py
          uv run pytest -v
      
      - name: Test wheel installation (Unix)
        if: runner.os != 'Windows'
        run: |
          cd sakurs-py
          # Build wheel to a specific directory
          mkdir -p dist
          uv run maturin build --release --features extension-module -o dist
          
          # Find the built wheel file
          WHEEL_FILE=$(find dist -name "*.whl" | head -1)
          if [ -z "$WHEEL_FILE" ]; then
            echo "No wheel file found in dist/"
            ls -la dist/
            exit 1
          fi
          echo "Installing wheel: $WHEEL_FILE"
          uv pip install --force-reinstall "$WHEEL_FILE"
          uv run python -c "import sakurs; print(sakurs.__version__)"
      
      - name: Test wheel installation (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd sakurs-py
          # Build wheel to a specific directory
          New-Item -ItemType Directory -Force -Path dist
          uv run maturin build --release --features extension-module -o dist
          
          # Find the built wheel file
          $WHEEL_FILE = Get-ChildItem -Path dist -Filter "*.whl" | Select-Object -First 1 -ExpandProperty FullName
          if (-not $WHEEL_FILE) {
            Write-Host "No wheel file found in dist/"
            Get-ChildItem -Path dist
            exit 1
          }
          Write-Host "Installing wheel: $WHEEL_FILE"
          uv pip install --force-reinstall "$WHEEL_FILE"
          uv run python -c "import sakurs; print(sakurs.__version__)"
      
      - name: Minimize uv cache
        run: uv cache prune --ci

  # Job to verify all Python CI passed (for branch protection rules)
  python-ci-success:
    name: Python CI Success
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [python-quick-checks, python-test]
    steps:
      - name: Check if all Python CI jobs passed
        run: |
          if [[ "${{ needs.python-quick-checks.result }}" != "success" || \
                "${{ needs.python-test.result }}" != "success" ]]; then
            echo "One or more Python CI jobs failed"
            exit 1
          fi
          echo "All Python CI jobs passed successfully"