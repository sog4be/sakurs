name: Python Wheels

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  # Build wheels for different platforms
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          # Linux: Build both x86_64 and aarch64
          - os: ubuntu-latest
            platform: linux
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            platform: linux
            target: aarch64-unknown-linux-gnu
          # Windows: Build x86_64 only (most common)
          - os: windows-latest
            platform: windows
            target: x86_64-pc-windows-msvc
          # macOS: Build both Intel and Apple Silicon
          - os: macos-latest
            platform: macos
            target: x86_64-apple-darwin
          - os: macos-latest
            platform: macos
            target: aarch64-apple-darwin

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Set up cross-compilation (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "sakurs-py/pyproject.toml"
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ". -> target"
          key: ${{ matrix.os }}-${{ matrix.target }}
      
      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('sakurs-py/pyproject.toml') }}
          restore-keys: |
            uv-${{ runner.os }}
      
      - name: Install dependencies
        run: |
          cd sakurs-py
          uv sync --dev
      
      - name: Build wheels
        run: |
          cd sakurs-py
          uv run maturin build --release --features extension-module --target ${{ matrix.target }} -o dist
      
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform }}-${{ matrix.target }}
          path: sakurs-py/dist/*.whl
          if-no-files-found: error
      
      - name: Minimize uv cache
        run: uv cache prune --ci

  # Build source distribution
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "sakurs-py/pyproject.toml"
      
      - name: Install dependencies
        run: |
          cd sakurs-py
          uv sync --dev
      
      - name: Build source distribution
        run: |
          cd sakurs-py
          uv run maturin sdist -o dist
      
      - name: Upload source distribution
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: sakurs-py/dist/*.tar.gz
          if-no-files-found: error

  # Test wheels on different platforms
  test-wheels:
    name: Test wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: build-wheels
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Skip older Python versions on Windows to save CI time
          - os: windows-latest
            python-version: '3.9'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: wheels/
      
      - name: Test wheel installation (Unix)
        if: runner.os != 'Windows'
        run: |
          # Find the appropriate wheel for this platform
          python -c "
          import sys
          import os
          import glob
          
          # Determine platform tag
          if sys.platform == 'win32':
              platform_tag = 'win_amd64'
          elif sys.platform == 'darwin':
              import platform
              if platform.machine() == 'arm64':
                  platform_tag = 'macosx_*_arm64'
              else:
                  platform_tag = 'macosx_*_x86_64'
          else:
              import platform
              if platform.machine() == 'aarch64':
                  platform_tag = 'linux_aarch64'
              else:
                  platform_tag = 'linux_x86_64'
          
          # Find matching wheel
          pattern = f'wheels/*{platform_tag}.whl'
          wheels = glob.glob(pattern)
          if not wheels:
              print(f'No wheel found for pattern: {pattern}')
              print('Available wheels:')
              for wheel in glob.glob('wheels/*.whl'):
                  print(f'  {wheel}')
              sys.exit(1)
          
          wheel = wheels[0]
          print(f'Installing wheel: {wheel}')
          
          # Write to GitHub Actions environment
          with open(os.environ['GITHUB_ENV'], 'a') as f:
              f.write(f'WHEEL_FILE={wheel}\n')
          "
      
      - name: Test wheel installation (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Find the appropriate wheel for this platform
          python -c "
          import sys
          import os
          import glob
          
          platform_tag = 'win_amd64'
          
          # Find matching wheel
          pattern = f'wheels/*{platform_tag}.whl'
          wheels = glob.glob(pattern)
          if not wheels:
              print(f'No wheel found for pattern: {pattern}')
              print('Available wheels:')
              for wheel in glob.glob('wheels/*.whl'):
                  print(f'  {wheel}')
              sys.exit(1)
          
          wheel = wheels[0]
          print(f'Installing wheel: {wheel}')
          
          # Write to GitHub Actions environment
          with open(os.environ['GITHUB_ENV'], 'a') as f:
              f.write(f'WHEEL_FILE={wheel}\n')
          "
      
      - name: Install and test wheel (Unix)
        if: runner.os != 'Windows'
        run: |
          uv pip install --force-reinstall "${{ env.WHEEL_FILE }}"
          uv run python -c "import sakurs; print(f'sakurs version: {sakurs.__version__}')"
          uv run python -c "
          import sakurs
          
          # Test basic functionality
          sbd = sakurs.DeltaSBD(language='english')
          sentences = sbd.split_sentences('Hello world. This is a test.')
          assert len(sentences) == 2
          assert sentences[0].strip() == 'Hello world.'
          assert sentences[1].strip() == 'This is a test.'
          print('✓ Basic functionality test passed')
          
          # Test Japanese support
          sbd_jp = sakurs.DeltaSBD(language='japanese')
          jp_sentences = sbd_jp.split_sentences('こんにちは。これはテストです。')
          assert len(jp_sentences) == 2
          print('✓ Japanese support test passed')
          
          # Test spaCy-style API
          nlp = sakurs.SakursNLP(language='english')
          doc = nlp('Hello world. This is a test.')
          assert len(list(doc.sents)) == 2
          print('✓ spaCy-style API test passed')
          
          print('All tests passed!')
          "
      
      - name: Install and test wheel (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          uv pip install --force-reinstall "$env:WHEEL_FILE"
          uv run python -c "import sakurs; print(f'sakurs version: {sakurs.__version__}')"
          uv run python -c "
          import sakurs
          
          # Test basic functionality
          sbd = sakurs.DeltaSBD(language='english')
          sentences = sbd.split_sentences('Hello world. This is a test.')
          assert len(sentences) == 2
          assert sentences[0].strip() == 'Hello world.'
          assert sentences[1].strip() == 'This is a test.'
          print('✓ Basic functionality test passed')
          
          # Test Japanese support
          sbd_jp = sakurs.DeltaSBD(language='japanese')
          jp_sentences = sbd_jp.split_sentences('こんにちは。これはテストです。')
          assert len(jp_sentences) == 2
          print('✓ Japanese support test passed')
          
          # Test spaCy-style API
          nlp = sakurs.SakursNLP(language='english')
          doc = nlp('Hello world. This is a test.')
          assert len(list(doc.sents)) == 2
          print('✓ spaCy-style API test passed')
          
          print('All tests passed!')
          "

  # Combine all wheel testing results
  wheels-success:
    name: Wheels Build Success
    if: ${{ always() }}
    runs-on: ubuntu-latest
    needs: [build-wheels, build-sdist, test-wheels]
    steps:
      - name: Check if all wheel jobs passed
        run: |
          if [[ "${{ needs.build-wheels.result }}" != "success" || \
                "${{ needs.build-sdist.result }}" != "success" || \
                "${{ needs.test-wheels.result }}" != "success" ]]; then
            echo "One or more wheel jobs failed"
            exit 1
          fi
          echo "All wheel jobs passed successfully"
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
      
      - name: List built artifacts
        run: |
          echo "Built artifacts:"
          find dist/ -name "*.whl" -o -name "*.tar.gz" | sort