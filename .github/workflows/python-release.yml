name: Python Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (do not actually publish)'
        required: false
        default: false
        type: boolean

env:
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  # Verify the release is ready
  pre-release-checks:
    name: Pre-release checks
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is_prerelease: ${{ steps.check-prerelease.outputs.is_prerelease }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Get version
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
            # Remove 'v' prefix if present
            VERSION="${VERSION#v}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"
      
      - name: Check if prerelease
        id: check-prerelease
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "This is a prerelease version"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "This is a stable release"
          fi
      
      - name: Verify version format
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)*$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: X.Y.Z or X.Y.Z-suffix"
            exit 1
          fi
      
      - name: Check version consistency
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          
          # Check Cargo.toml version
          CARGO_VERSION=$(grep "^version" Cargo.toml | head -1 | sed 's/version = "//' | sed 's/"//')
          if [[ "$CARGO_VERSION" != "$VERSION" ]]; then
            echo "Version mismatch: Cargo.toml has $CARGO_VERSION, but release is $VERSION"
            exit 1
          fi
          
          # Check sakurs-py pyproject.toml version
          cd sakurs-py
          PYTHON_VERSION=$(grep "^version" pyproject.toml | sed 's/version = "//' | sed 's/"//')
          if [[ "$PYTHON_VERSION" != "$VERSION" ]]; then
            echo "Version mismatch: sakurs-py pyproject.toml has $PYTHON_VERSION, but release is $VERSION"
            exit 1
          fi
          
          echo "All version checks passed: $VERSION"

  # Build release artifacts
  build-release:
    name: Build release artifacts
    runs-on: ${{ matrix.os }}
    needs: pre-release-checks
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Set up cross-compilation (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "sakurs-py/pyproject.toml"
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: ". -> target"
          key: release-${{ matrix.os }}-${{ matrix.target }}
      
      - name: Install dependencies
        run: |
          cd sakurs-py
          uv sync --dev
      
      - name: Build wheel
        run: |
          cd sakurs-py
          uv run maturin build --release --features extension-module --target ${{ matrix.target }} -o dist
      
      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheel-${{ matrix.platform }}-${{ matrix.target }}
          path: sakurs-py/dist/*.whl
          if-no-files-found: error
      
      - name: Minimize uv cache
        run: uv cache prune --ci

  # Build source distribution
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    needs: pre-release-checks
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "sakurs-py/pyproject.toml"
      
      - name: Install dependencies
        run: |
          cd sakurs-py
          uv sync --dev
      
      - name: Build source distribution
        run: |
          cd sakurs-py
          uv run maturin sdist -o dist
      
      - name: Upload source distribution
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: sakurs-py/dist/*.tar.gz
          if-no-files-found: error

  # Test release artifacts
  test-release:
    name: Test release artifacts
    runs-on: ${{ matrix.os }}
    needs: [build-release, build-sdist]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # Skip older Python versions on Windows to save CI time
          - os: windows-latest
            python-version: '3.9'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          pattern: wheel-*
          merge-multiple: true
          path: wheels/
      
      - name: Test wheel installation (Unix)
        if: runner.os != 'Windows'
        run: |
          # Find the appropriate wheel for this platform
          python -c "
          import sys
          import os
          import glob
          
          # Determine platform tag
          if sys.platform == 'win32':
              platform_tag = 'win_amd64'
          elif sys.platform == 'darwin':
              import platform
              if platform.machine() == 'arm64':
                  platform_tag = 'macosx_*_arm64'
              else:
                  platform_tag = 'macosx_*_x86_64'
          else:
              import platform
              if platform.machine() == 'aarch64':
                  platform_tag = 'linux_aarch64'
              else:
                  platform_tag = 'linux_x86_64'
          
          # Find matching wheel
          pattern = f'wheels/*{platform_tag}.whl'
          wheels = glob.glob(pattern)
          if not wheels:
              print(f'No wheel found for pattern: {pattern}')
              print('Available wheels:')
              for wheel in glob.glob('wheels/*.whl'):
                  print(f'  {wheel}')
              sys.exit(1)
          
          wheel = wheels[0]
          print(f'Installing wheel: {wheel}')
          
          # Write to GitHub Actions environment
          with open(os.environ['GITHUB_ENV'], 'a') as f:
              f.write(f'WHEEL_FILE={wheel}\n')
          "
      
      - name: Test wheel installation (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # Find the appropriate wheel for this platform
          python -c "
          import sys
          import os
          import glob
          
          platform_tag = 'win_amd64'
          
          # Find matching wheel
          pattern = f'wheels/*{platform_tag}.whl'
          wheels = glob.glob(pattern)
          if not wheels:
              print(f'No wheel found for pattern: {pattern}')
              print('Available wheels:')
              for wheel in glob.glob('wheels/*.whl'):
                  print(f'  {wheel}')
              sys.exit(1)
          
          wheel = wheels[0]
          print(f'Installing wheel: {wheel}')
          
          # Write to GitHub Actions environment
          with open(os.environ['GITHUB_ENV'], 'a') as f:
              f.write(f'WHEEL_FILE={wheel}\n')
          "
      
      - name: Install and test wheel (Unix)
        if: runner.os != 'Windows'
        run: |
          uv pip install --force-reinstall "${{ env.WHEEL_FILE }}"
          
          # Test basic functionality
          uv run python -c "
          import sakurs
          
          print(f'sakurs version: {sakurs.__version__}')
          
          # Test English processing
          sbd = sakurs.DeltaSBD(language='english')
          sentences = sbd.split_sentences('Hello world. This is a test.')
          assert len(sentences) == 2, f'Expected 2 sentences, got {len(sentences)}'
          print('✓ English processing test passed')
          
          # Test Japanese processing
          sbd_jp = sakurs.DeltaSBD(language='japanese')
          jp_sentences = sbd_jp.split_sentences('こんにちは。これはテストです。')
          assert len(jp_sentences) == 2, f'Expected 2 Japanese sentences, got {len(jp_sentences)}'
          print('✓ Japanese processing test passed')
          
          # Test spaCy-style API
          nlp = sakurs.SakursNLP(language='english')
          doc = nlp('Hello world. This is a test.')
          sent_count = len(list(doc.sents))
          assert sent_count == 2, f'Expected 2 sentences via spaCy API, got {sent_count}'
          print('✓ spaCy-style API test passed')
          
          print('All release tests passed!')
          "
      
      - name: Install and test wheel (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          uv pip install --force-reinstall "$env:WHEEL_FILE"
          
          # Test basic functionality
          uv run python -c "
          import sakurs
          
          print(f'sakurs version: {sakurs.__version__}')
          
          # Test English processing
          sbd = sakurs.DeltaSBD(language='english')
          sentences = sbd.split_sentences('Hello world. This is a test.')
          assert len(sentences) == 2, f'Expected 2 sentences, got {len(sentences)}'
          print('✓ English processing test passed')
          
          # Test Japanese processing
          sbd_jp = sakurs.DeltaSBD(language='japanese')
          jp_sentences = sbd_jp.split_sentences('こんにちは。これはテストです。')
          assert len(jp_sentences) == 2, f'Expected 2 Japanese sentences, got {len(jp_sentences)}'
          print('✓ Japanese processing test passed')
          
          # Test spaCy-style API
          nlp = sakurs.SakursNLP(language='english')
          doc = nlp('Hello world. This is a test.')
          sent_count = len(list(doc.sents))
          assert sent_count == 2, f'Expected 2 sentences via spaCy API, got {sent_count}'
          print('✓ spaCy-style API test passed')
          
          print('All release tests passed!')
          "

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [pre-release-checks, build-release, build-sdist, test-release]
    environment: 
      name: pypi
      url: https://pypi.org/project/sakurs/
    permissions:
      id-token: write  # For trusted publishing
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
      
      - name: Prepare distribution files
        run: |
          # Move all wheels and sdist to a single directory
          mkdir -p final-dist
          find dist/ -name "*.whl" -exec mv {} final-dist/ \;
          find dist/ -name "*.tar.gz" -exec mv {} final-dist/ \;
          
          echo "Final distribution files:"
          ls -la final-dist/
      
      - name: Dry run check
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "This is a dry run - would publish the following files:"
          ls -la final-dist/
          echo "Skipping actual publication"
      
      - name: Publish to PyPI
        if: github.event.inputs.dry_run != 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: final-dist/
          # Use TestPyPI for prereleases
          repository-url: ${{ needs.pre-release-checks.outputs.is_prerelease == 'true' && 'https://test.pypi.org/legacy/' || '' }}
          print-hash: true
          verbose: true

  # Create GitHub release (if triggered by workflow_dispatch)
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-release-checks, publish-pypi]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
      
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find dist/ -name "*.whl" -exec mv {} release-assets/ \;
          find dist/ -name "*.tar.gz" -exec mv {} release-assets/ \;
          
          echo "Release assets:"
          ls -la release-assets/
      
      - name: Generate release notes
        run: |
          VERSION="${{ needs.pre-release-checks.outputs.version }}"
          echo "## What's New in v$VERSION" > release-notes.md
          echo "" >> release-notes.md
          echo "### Features" >> release-notes.md
          echo "- Python bindings available on PyPI" >> release-notes.md
          echo "- Cross-platform wheels for Linux, Windows, and macOS" >> release-notes.md
          echo "- Support for Python 3.9-3.12" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Installation" >> release-notes.md
          echo "\`\`\`bash" >> release-notes.md
          echo "pip install sakurs" >> release-notes.md
          echo "\`\`\`" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Usage" >> release-notes.md
          echo "\`\`\`python" >> release-notes.md
          echo "from sakurs import DeltaSBD" >> release-notes.md
          echo "" >> release-notes.md
          echo "sbd = DeltaSBD(language='english')" >> release-notes.md
          echo "sentences = sbd.split_sentences('Hello world. This is a test.')" >> release-notes.md
          echo "print(sentences)  # ['Hello world.', 'This is a test.']" >> release-notes.md
          echo "\`\`\`" >> release-notes.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.pre-release-checks.outputs.version }}
          name: Release v${{ needs.pre-release-checks.outputs.version }}
          body_path: release-notes.md
          files: release-assets/*
          prerelease: ${{ needs.pre-release-checks.outputs.is_prerelease == 'true' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Post-release notifications
  post-release:
    name: Post-release notifications
    runs-on: ubuntu-latest
    needs: [pre-release-checks, publish-pypi]
    if: github.event.inputs.dry_run != 'true'
    
    steps:
      - name: Release summary
        run: |
          VERSION="${{ needs.pre-release-checks.outputs.version }}"
          IS_PRERELEASE="${{ needs.pre-release-checks.outputs.is_prerelease }}"
          
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: $([ "$IS_PRERELEASE" = "true" ] && echo "Pre-release" || echo "Stable release")" >> $GITHUB_STEP_SUMMARY
          echo "- **PyPI**: https://pypi.org/project/sakurs/$VERSION/" >> $GITHUB_STEP_SUMMARY
          echo "- **Installation**: \`pip install sakurs==$VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Release published successfully!"